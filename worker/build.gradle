apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "net.eanfang.worker"
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 19033001
        versionName "2.3.38"
        multiDexEnabled true
//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // gradle 3.0.0 以上需要有这个
        flavorDimensions "app"
        buildConfigField("String", "TYPE_TECHNICIAN", "\"technician\"")
        buildConfigField("String", "TYPE", "\"worker\"")
        buildConfigField("String", "TYPE_APP", "\"app\"")
        buildConfigField("int", "APP_TYPE", "0")

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi'
        }
        //信鸽配置
        manifestPlaceholders = [
                XG_ACCESS_ID : "2100270002",
                XG_ACCESS_KEY: "A72E1ECQX57G",
                AMAP_KEY     : "db2be5c0ebed1c47388afd3c361bbfe3",
                HW_APPID     : "100379649",
                PACKAGE_NAME : "net.eanfang.worker"

        ]
        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }

    }

    //签名设置
    signingConfigs {
        release {
            keyAlias KEY_ALIAS_WORKER
            keyPassword KEY_PASSWORD_WORKER
            storeFile file('../worker/keystore/worker.jks')
            storePassword KEYSTORE_PASSWORD_WORKER
        }
    }
    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDirs = ['src/main/jnilibs']
            res.srcDirs = [
                    'src/main/res/layout/online',
                    'src/main/res'
            ]
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
            //测试bugly
            buildConfigField("String", "BUGLY_WORKER", "\"fecc678a04\"")
            // 不显示Log
//            buildConfigField("boolean", "DEBUG", cfg.debugMod)
//            buildConfigField("String", "HOST", "\"http://192.168.0.222:8080\"")
//            buildConfigField("String", "API_HOST", "\"http://192.168.0.222:8080\"")

            // 上线url
            buildConfigField("String", "HOST", "\"https://api.eanfang.net\"")
            buildConfigField("String", "API_HOST", "\"https://api.eanfang.net\"")
        }
        release {
            //签名配置
            signingConfig signingConfigs.release
            //正式bugly
            buildConfigField("String", "BUGLY_WORKER", "\"a6bae9f6ee\"")
            // 不显示Log
//            buildConfigField("boolean", "DEBUG", cfg.debugMod)
            //Zipalign优化
            zipAlignEnabled true
            //混淆
            minifyEnabled true
            //加载默认混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                if (variant.buildType.name.equals('release')) {
                    variant.outputs.all {
                        outputFileName = "worker_release_v${variant.versionName}_${releaseTime()}${variant.flavorName}.apk"
                    }
                }
            }
            // 批量打包(gradle 3.0.0 以上)
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "worker_release_v${variant.versionName}_${releaseTime()}${variant.flavorName}.apk"
                }
            }
        }

    }

    dexOptions {
        javaMaxHeapSize "4g"
    }
//    dataBinding {
//        enable = true
//    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // aapt2 问题 png图片问题
    aaptOptions.cruncherEnabled = false
//    aaptOptions.useNewCruncher = false
    //多渠道打包，命令行打包：gradlew assembleRelease
    productFlavors {
        // gradle 3.0.0 以上需要有这个
        // dimension "app"
        "xiaomi" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "xiaomi"]
        }
        "baidu" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "baidu"]
        }
        "huawei" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "baidu"]
        }
        "wandoujia" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "wandoujia"]
        }
        "meizu" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "meizu"]
        }
        "tencent" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "tencent"]
        }
        "qh360" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "qh360"]
        }
        "oppo" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "oppo"]
        }
        "vivo" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "vivo"]
        }
        "lenovo" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "lenovo"]
        }
        "samsung" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "samsung"]
        }
    }
}

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    //butterknife
    compile 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
    // add library
    implementation project(':IMKit')
    implementation project(':zxing')
    implementation project(':IMLib')
    implementation project(':eanfang')

}
