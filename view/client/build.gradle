apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'android-aspectjx'
apply plugin: 'com.jakewharton.hugo'

android {
    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion
    defaultConfig {
        applicationId cfg.clientId
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName
        multiDexEnabled true
        // gradle 3.0.0 以上需要有这个
        flavorDimensions "app"
        buildConfigField("String", "APP_TYPE", "\"client\"")

        buildConfigField("String", "MOB_CLIENT_APPID", cfg.mobClientAppId)
        buildConfigField("String", "MOB_CLIENT_APPKEY", cfg.mobClientAppKey)

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi'
            //信鸽配置
            manifestPlaceholders = [
                    XG_ACCESS_ID : cfg.xgClientAccessId,
                    XG_ACCESS_KEY: cfg.xgClientAccessKey,
                    AMAP_KEY     : cfg.xgClientAmapKey,
                    HW_APPID     : cfg.xgClientHwAppid,
                    PACKAGE_NAME : cfg.clientId
            ]
        }

        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    //签名设置
    signingConfigs {
        release {
            keyAlias KEY_ALIAS_CLIENT
            keyPassword KEY_PASSWORD_CLIENT
            storeFile file('../client/keystore/client.jks')
            storePassword KEYSTORE_PASSWORD_CLIENT
        }
    }
    buildTypes {
        debug {
            //签名配置
            signingConfig signingConfigs.release
            //测试环境bugly
            buildConfigField("String", "BUGLY_CLIENT", cfg.clientBetaBugly)
        }
        release {
            //签名配置
            signingConfig signingConfigs.release
            //正式环境bugly
            buildConfigField("String", "BUGLY_CLIENT", cfg.clientProBugly)
            //Zipalign优化
            zipAlignEnabled true
            //混淆
            minifyEnabled true
            //加载默认混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 批量打包(gradle 3.0.0 以下)
            applicationVariants.all { variant ->
                if (variant.buildType.name.equals('release')) {
                    variant.outputs.all {
                        outputFileName = "client_release_v${variant.versionName}_${releaseTime()}${variant.flavorName}.apk"
                    }
                }
            }
            // 批量打包(gradle 3.0.0 以上)
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "client_release_v${variant.versionName}_${releaseTime()}${variant.flavorName}.apk"
                }
            }
        }

    }


    compileOptions {
        sourceCompatibility cfg.javaVersion
        targetCompatibility cfg.javaVersion
    }
    dexOptions {//解决分包gradle 编译oom问题
        javaMaxHeapSize "4g"
    }
// aapt2 问题 png图片问题
    aaptOptions.cruncherEnabled = false

    //多渠道打包，命令行打包：gradlew assembleRelease
    productFlavors {
        // gradle 3.0.0 以上需要有这个
        // dimension "app"
        "xiaomi" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "xiaomi"]
        }
        "baidu" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "baidu"]
        }
        "huawei" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "huawei"]
        }
        "wandoujia" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "wandoujia"]
        }
        "meizu" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "meizu"]
        }
        "tencent" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "tencent"]
        }
        "qh360" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "qh360"]
        }
        "oppo" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "oppo"]
        }
        "vivo" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "vivo"]
        }
        "lenovo" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "lenovo"]
        }
        "samsung" {
            dimension "app"
            manifestPlaceholders = [tac_channel: "samsung"]
        }
    }
    dataBinding {
        enabled = true
    }
//    hugo {
//        enabled true
//    }
}

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation pkg.constraintlayout

    //butterknife
    implementation pkg.butterknife
    annotationProcessor pkg.butterknifeCompiler
    implementation pkg.lombok
    annotationProcessor pkg.lombok
    implementation pkg.yingshiyun
    implementation project(':view:eanfang')

}
