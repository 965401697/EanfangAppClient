package com.greendao.downloader;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yaf.base.entity.FinalDataEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FINAL_DATA_ENTITY".
*/
public class FinalDataEntityDao extends AbstractDao<FinalDataEntity, Void> {

    public static final String TABLENAME = "FINAL_DATA_ENTITY";

    /**
     * Properties of entity FinalDataEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FileName = new Property(0, String.class, "fileName", false, "FILE_NAME");
        public final static Property List = new Property(1, String.class, "List", false, "LIST");
        public final static Property Index = new Property(2, int.class, "index", false, "INDEX");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
    }


    public FinalDataEntityDao(DaoConfig config) {
        super(config);
    }
    
    public FinalDataEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FINAL_DATA_ENTITY\" (" + //
                "\"FILE_NAME\" TEXT NOT NULL ," + // 0: fileName
                "\"LIST\" TEXT NOT NULL ," + // 1: List
                "\"INDEX\" INTEGER NOT NULL ," + // 2: index
                "\"NAME\" TEXT);"); // 3: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FINAL_DATA_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FinalDataEntity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getFileName());
        stmt.bindString(2, entity.getList());
        stmt.bindLong(3, entity.getIndex());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FinalDataEntity entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getFileName());
        stmt.bindString(2, entity.getList());
        stmt.bindLong(3, entity.getIndex());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FinalDataEntity readEntity(Cursor cursor, int offset) {
        FinalDataEntity entity = new FinalDataEntity( //
            cursor.getString(offset + 0), // fileName
            cursor.getString(offset + 1), // List
            cursor.getInt(offset + 2), // index
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FinalDataEntity entity, int offset) {
        entity.setFileName(cursor.getString(offset + 0));
        entity.setList(cursor.getString(offset + 1));
        entity.setIndex(cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FinalDataEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FinalDataEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(FinalDataEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
